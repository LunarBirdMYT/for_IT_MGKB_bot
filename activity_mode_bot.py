import threading
import time

from telebot import types

import config
import data.data_bot as db

easy_work = {
    'consultation': ('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!'),
    'miac': ('–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ú–ò–ê–¶', '–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ú–ò–ê–¶ —É—á—Ç–µ–Ω–æ!'),
    'egisz': ('–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ï–ì–ò–°–ó', '–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ï–ì–ò–°–ó —É—á—Ç–µ–Ω–æ!'),
    'frv_frk': ('–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –§–†–í –∏–ª–∏ –§–†–ö', '–î–µ–π—Å—Ç–≤–∏—è —Å —Ñ–µ–¥.—Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏ —É—á—Ç–µ–Ω—ã!'),
    'emias_pol': ('–ï–ú–ò–ê–° –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–î–µ–π—Å—Ç–≤–∏—è —Å –ï–ú–ò–ê–° –ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞ —É—á—Ç–µ–Ω—ã!'),
    'emias_stas': ('–ï–ú–ò–ê–° –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä', '–î–µ–π—Å—Ç–≤–∏—è —Å –ï–ú–ò–ê–° –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä —É—á—Ç–µ–Ω—ã!')
    }
menu_install = {
    'install_crypto_pro': ('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö—Ä–∏–ø—Ç–æ–ü—Ä–æ', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏–ø—Ç—ã —É—á—Ç–µ–Ω–∞!'),
    'install_true_conf': ('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ TrueConf', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä—É–∫–æ–Ω—Ñ–∞ —É—á—Ç–µ–Ω–∞!'),
    'install_ers_fss': ('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≠–†–° –æ—Ç –§–°–°', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç—Ä—Å —É—á—Ç–µ–Ω–∞!'),
    'install_kasper': ('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–∞—Å–ø–µ—Ä—Å–∫–æ–≥–æ', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Å–ø–µ—Ä–∞ —É—á—Ç–µ–Ω–∞!'),
    'install_any_po': ('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—á–µ–≥–æ –ü–û', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—á–µ–≥–æ –ü–û —É—á—Ç–µ–Ω–∞!')
    }


def menu_func(button, user_id):
    buttons_menu = (
            button(text=easy_work['consultation'][0],
                   callback_data='consultation'),
            button(text=easy_work['miac'][0],
                   callback_data='miac'),
            button(text=easy_work['egisz'][0],
                   callback_data='egisz'),
            button(text='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û',
                   callback_data='install_po'),
            button(text=easy_work['frv_frk'][0],
                   callback_data='frv_frk'),
            button(text=easy_work['emias_pol'][0],
                   callback_data='emias_pol'),
            button(text=easy_work['emias_stas'][0],
                   callback_data='emias_stas'),
            button(text='–ü—Ä–æ—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
                   callback_data='any_activity'),
            button(text='–ö–∞–∫ —è —Ç–∞–º –Ω–∞—Ç—Ä—É–¥–∏–ª—Å—è?üè•',
                   callback_data='my_activity'),
            button(text='–ü–æ–∫–∞–∂–∏ –º–æ–∏ –ø—Ä–æ—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏üè•',
                   callback_data='my_activity_another'),
            button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–ºüåè',
                   callback_data='back_normal_mode')
            )
    if user_id == config.USERS[2]:
        return buttons_menu + (
            button(text='–û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü üî•',
                   callback_data='report_now_month'),
            button(text='–û—Ç—á–µ—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü üî•',
                   callback_data='report_last_month'),
        )
    return buttons_menu


def activity_mode_func(bot):
    def create_record_db(message):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ—á–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö –≤ –±–¥."""
        work = message.text
        if len(work) > 500:
            work = work[:500]
        user_id = message.from_user.id
        db.adding_any_work(user_id, work, config.USERS, is_any=True)
        kb_activity_res = types.InlineKeyboardMarkup(row_width=1)
        button = types.InlineKeyboardButton
        for el in menu_func(button, user_id):
            kb_activity_res.add(el)
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ—á–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á—Ç–µ–Ω–∞.',
                         reply_markup=kb_activity_res)

    @bot.message_handler(
        func=lambda message: message.text == '–†–µ–∂–∏–º —É—á—ë—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')
    def activity_res(message):
        user_id = message.from_user.id
        kb_activity_res = types.InlineKeyboardMarkup(row_width=1)
        button = types.InlineKeyboardButton
        for el in menu_func(button, user_id):
            kb_activity_res.add(el)
        bot.send_message(message.chat.id,
                         '–†–µ–∂–∏–º —É—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
                         reply_markup=kb_activity_res)

    @bot.callback_query_handler(func=lambda callback: callback.data)
    def use_callback_data(callback):
        call = callback.message  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        button = types.InlineKeyboardButton

        if callback.data in easy_work:
            user_id = callback.from_user.id
            db.adding_any_work(
                user_id,
                easy_work[callback.data][0],
                config.USERS
            )
            kb1 = types.InlineKeyboardMarkup(row_width=1)
            for el in menu_func(button, user_id):
                kb1.add(el)
            if call.text != easy_work[callback.data][1]:
                bot.edit_message_text(chat_id=call.chat.id,
                                      message_id=call.id,
                                      text=easy_work[callback.data][1],
                                      reply_markup=kb1)
            else:
                bot.edit_message_text(chat_id=call.chat.id,
                                      message_id=call.id,
                                      text=easy_work[callback.data][1] + '+1',
                                      reply_markup=kb1)

        elif callback.data == 'install_po':
            kb_install_po = types.InlineKeyboardMarkup(row_width=1)
            for key, value in menu_install.items():
                kb_install_po.add(
                    button(text=value[0],
                           callback_data=key)
                )
            bot.edit_message_text(chat_id=call.chat.id,
                                  message_id=call.id,
                                  text='–ß—Ç–æ —Å—Ç–∞–≤–∏–ª–∏?',
                                  reply_markup=kb_install_po)
        elif callback.data in menu_install:
            user_id = callback.from_user.id
            db.adding_any_work(
                user_id,
                menu_install[callback.data][0],
                config.USERS
            )
            kb2 = types.InlineKeyboardMarkup(row_width=1)
            for el in menu_func(button, user_id):
                kb2.add(el)
            if call.text != menu_install[callback.data][1]:
                bot.edit_message_text(chat_id=call.chat.id,
                                      message_id=call.id,
                                      text=menu_install[callback.data][1],
                                      reply_markup=kb2)
            else:
                bot.edit_message_text(
                    chat_id=call.chat.id,
                    message_id=call.id,
                    text=menu_install[callback.data][1] + '+1',
                    reply_markup=kb2
                )
        elif callback.data == 'any_activity':
            user_id = callback.from_user.id
            send = bot.send_message(
                call.chat.id,
                '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–µ–ª–µ–Ω–Ω–∞–π —Ä–∞–±–æ—Ç–µ.'
            )
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫
            thread_writer = threading.Thread(
                target=bot.register_next_step_handler,
                args=(send, create_record_db),
                daemon=True
            )
            # bot.register_next_step_handler(send, create_record_db)
            thread_writer.start()

        elif callback.data == 'my_activity':
            user_id = callback.from_user.id
            kb3 = types.InlineKeyboardMarkup(row_width=1)
            for el in menu_func(button, user_id):
                kb3.add(el)
            succesess_work = db.my_works(user_id)
            if not succesess_work:
                if call.text not in '–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.':
                    bot.edit_message_text(
                        chat_id=call.chat.id,
                        message_id=call.id,
                        text='–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.',
                        reply_markup=kb3)
                    return
                else:
                    bot.edit_message_text(
                        chat_id=call.chat.id,
                        message_id=call.id,
                        text='–ó–∞–ø–∏—Å–µ–π –≤—Å—ë —Ç–∞–∫ –∂–µ –Ω–µ—Ç.',
                        reply_markup=kb3)
                    return
            text_work = ''
            for work, count in succesess_work:
                text_work += f'{work}: {count}\n'
            if call.text not in text_work:
                bot.edit_message_text(chat_id=call.chat.id,
                                      message_id=call.id,
                                      text=text_work,
                                      reply_markup=kb3)
            else:
                bot.edit_message_text(
                    chat_id=call.chat.id,
                    message_id=call.id,
                    text='–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è...',
                    reply_markup=kb3
                )
        elif callback.data == 'my_activity_another':
            user_id = callback.from_user.id
            kb4 = types.InlineKeyboardMarkup(row_width=1)
            for el in menu_func(button, user_id):
                kb4.add(el)
            succesess_work = db.my_another_works(user_id)
            if not succesess_work:
                if call.text not in '–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.':
                    bot.edit_message_text(
                        chat_id=call.chat.id,
                        message_id=call.id,
                        text='–ó–∞–ø–∏—Å–µ–π –Ω–µ—Ç.',
                        reply_markup=kb4)
                    return
                else:
                    bot.edit_message_text(
                        chat_id=call.chat.id,
                        message_id=call.id,
                        text='–ó–∞–ø–∏—Å–µ–π –≤—Å—ë —Ç–∞–∫ –∂–µ –Ω–µ—Ç.',
                        reply_markup=kb4)
                    return
            text_work = ''
            for number, work in enumerate(succesess_work, 1):
                text_work += f'{number}. {work}\n'
            if len(text_work) > 800:
                text_work = text_work[:800]
            if call.text not in text_work:
                bot.edit_message_text(chat_id=call.chat.id,
                                      message_id=call.id,
                                      text=text_work,
                                      reply_markup=kb4)
            else:
                bot.edit_message_text(
                    chat_id=call.chat.id,
                    message_id=call.id,
                    text='–ß—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∂–º–∞–∫ –ø–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ?',
                    reply_markup=kb4)
        elif callback.data == 'back_normal_mode':
            bot.delete_message(chat_id=call.chat.id,
                               message_id=call.id)
            kb_1 = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                             one_time_keyboard=True)
            button = types.KeyboardButton
            kb_1.add(button(text='Linuxüêß'),
                     button(text='Windowsü™ü'),
                     button(text='–í–µ–± —Ä–µ—Å—É—Ä—Å—ã'))
            if callback.from_user.id == config.USERS[0]:
                kb_1.row(button(text='–†–µ–∂–∏–º —É—á—ë—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'))
            bot.send_message(call.chat.id,
                             '–° —á–µ–º —Ä–∞–±–æ—Ç–∞–µ–º?',
                             reply_markup=kb_1)
        elif callback.data == 'report_now_month':
            user_id = callback.from_user.id
            kb5 = types.InlineKeyboardMarkup(row_width=1)
            for el in menu_func(button, user_id):
                kb5.add(el)
            # –†–∞–∑–¥–µ–ª –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–º–µ—Ö —Ä–∞–±–æ—Ç
            succesess_work_count = db.all_works_now_month()
            text_work_count = ''
            for name, record, count in succesess_work_count:
                text_work_count += f'{name}: {record} - {count}\n'
            succesess_work = db.all_any_works_now_month()
            text_work = ''
            for name, record in succesess_work:
                text_work += f'{name}: {record}\n'

            if not succesess_work_count:
                bot.send_message(call.chat.id,
                                 '–°—Ç—Ä–∞–Ω–Ω–æ, –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—ã—á–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –Ω–µ—Ç.')
            else:
                bot.send_message(call.chat.id,
                                 text_work_count)
            time.sleep(0.5)
            if not succesess_work:
                bot.send_message(call.chat.id,
                                 '–ó–∞–ø–∏—Å–µ–π –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –Ω–µ—Ç.')
            else:
                bot.send_message(call.chat.id,
                                 text_work)
            time.sleep(0.5)
            bot.send_message(call.chat.id,
                             '–û—Ç—á–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤—ã—à–µ.',
                             reply_markup=kb5)
        elif callback.data == 'report_last_month':
            user_id = callback.from_user.id
            kb6 = types.InlineKeyboardMarkup(row_width=1)
            for el in menu_func(button, user_id):
                kb6.add(el)
            # –†–∞–∑–¥–µ–ª –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–º–µ—Ö —Ä–∞–±–æ—Ç
            succesess_work_count = db.all_works_last_month()
            text_work_count = ''
            for name, record, count in succesess_work_count:
                text_work_count += f'{name}: {record} - {count}\n'
            succesess_work = db.all_any_works_last_month()
            text_work = ''
            for name, record in succesess_work:
                text_work += f'{name}: {record}\n'

            if not succesess_work_count:
                bot.send_message(call.chat.id,
                                 '–°—Ç—Ä–∞–Ω–Ω–æ, –∑–∞–ø–∏—Å–µ–π –æ–± –æ–±—ã—á–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –Ω–µ—Ç.')
            else:
                bot.send_message(call.chat.id,
                                 text_work_count)
            time.sleep(0.5)
            if not succesess_work:
                bot.send_message(call.chat.id,
                                 '–ó–∞–ø–∏—Å–µ–π –æ–± –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö –Ω–µ—Ç.')
            else:
                bot.send_message(call.chat.id,
                                 text_work)
            time.sleep(0.5)
            bot.send_message(call.chat.id,
                             '–û—Ç—á–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤—ã—à–µ.',
                             reply_markup=kb6)
